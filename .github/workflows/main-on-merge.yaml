## This Action is run when a commit is made to the main branch (ideally a PR merge)
##  - Collects READMEs for Github Wiki
##  - Creates Github Release (with codebase after commit) and Git Tag
##  - Creates Changelog for Release
##  - Upmerges branch to develop (so any changes that were made in release branch are in develop)

name: "Release-Tag"

on: 
  push:
    branches:
      - main

jobs:
  wiki-sync:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3.1.0
      
    - name: Collect READMEs for Wiki
      run: ./scripts/workflows/collect-wiki.sh

    # from: https://github.com/marketplace/actions/wiki-page-creator-action
    - name: Upload READMEs to Wiki
      uses: docker://decathlon/wiki-page-creator-action:latest
      env:
        ACTION_MAIL: devlin.junker@gmail.com
        ACTION_NAME: devlinjunker
        GH_PAT: ${{ secrets.PAT }}
        MD_FOLDER: "./wiki"
        OWNER: devlinjunker
        REPO_NAME: template.github
        SKIP_MD: README.md

  create-release-tag:
    strategy: 
      max-parallel: 1
    runs-on: ubuntu-latest

    outputs:
      major: ${{ steps.version.outputs.major }}
      minor: ${{ steps.version.outputs.minor }}
      patch: ${{ steps.version.outputs.patch }}
      found: ${{ steps.check_exists.outputs.found }}

    steps: 
    - uses: actions/checkout@v3.1.0
      with:
        ## This is a Personal Access Token from Admin User that allows us to bypass branch protections on develop
        token: ${{ secrets.PAT }}
        fetch-depth: 0

    # NOTE: Update CHANGELOG_PREFIX_LIST to configure the lines you wan to include in the changelog (body of release PR)
    - name: "Get Release Info"
      id: version
      run: |
        git fetch --all --tags;
        git checkout main;
        cd scripts/release;
        unzip git-mkver-linux.zip;
        cd ../..;
        echo "##[set-output name=major;]$(./scripts/release/git-mkver-linux next --format '{Major}')";
        echo "##[set-output name=minor;]$(./scripts/release/git-mkver-linux next --format '{Minor}')";
        echo "##[set-output name=patch;]$(./scripts/release/git-mkver-linux next --format '{Patch}')";
        CHANGELOG=$(git log --format=%s $(git describe --tags --abbrev=0)..HEAD | grep -i -E "^($CHANGELOG_PREFIX_LIST)" | sed "s/^/ - /") 
        CHANGELOG="${CHANGELOG//'%'/'%25'}"
        CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
        CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
        echo "##[set-output name=changelog;]$(echo $CHANGELOG)";
      env:
        CHANGELOG_PREFIX_LIST: "feature|feat|fix|bugfix|bug"

    # Determine if the tag already exists (created by patch merge)
    - name: "Check Release Exists"
      id: check_exists
      run: |
        echo "##[set-output name=found;]$(git tag | grep $RELEASE)";
      env:
        RELEASE: v${{ steps.version.outputs.major }}.${{ steps.version.outputs.minor }}.${{ steps.version.outputs.patch }}

    - name: Create Github Release
      id: create_release
      if: steps.check_exists.outputs.found == ''
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.major }}.${{ steps.version.outputs.minor }}.${{ steps.version.outputs.patch }}
        release_name: release-${{ steps.version.outputs.major }}.${{ steps.version.outputs.minor }}.${{ steps.version.outputs.patch }}
        body: ${{ steps.version.outputs.changelog }}
  
  upmerge-after-release:      
    strategy: 
      max-parallel: 1
    runs-on: ubuntu-latest
    needs: create-release-tag

    steps: 
    - uses: actions/checkout@v3.1.0
      with:
        ## This is a Personal Access Token from Admin User that allows us to bypass branch protections on develop
        token: ${{ secrets.PAT }}
        fetch-depth: 0  

    - name: Upmerge develop After Release
      if: needs.create-release-tag.outputs.found == ''
      run: |
        git config --global user.name 'Release Cut';
        git config --global user.email 'release@cut.com';
        ./scripts/release/release-prep-upmerge.sh main
        git commit -m "upmerge after $RELEASE";
        git push;
        git checkout $RELEASE_BRANCH;
        git pull;
        git merge main;
        git push;
      env:
        RELEASE: v${{ needs.create-release-tag.outputs.major }}.${{ needs.create-release-tag.outputs.minor }}.${{ needs.create-release-tag.outputs.patch }}
        RELEASE_BRANCH: release-${{ needs.create-release-tag.outputs.major }}.${{ needs.create-release-tag.outputs.minor }}